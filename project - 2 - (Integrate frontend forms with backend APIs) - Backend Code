const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('./models/User');
const app = express();

const JWT_SECRET = 'secret_key';

app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect('mongodb://localhost:27017/eduPlatform', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log('MongoDB connected'));

// Signup
app.post('/api/signup', async (req, res) => {
  const { username, email, password } = req.body;
  if (!username || !email || !password) return res.status(400).json({ message: 'All fields required' });

  const existing = await User.findOne({ email });
  if (existing) return res.status(400).json({ message: 'Email already exists' });

  const hashed = await bcrypt.hash(password, 10);
  await new User({ username, email, password: hashed }).save();
  res.status(201).json({ message: 'Signup successful' });
});

// Login
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(400).json({ message: 'Invalid credentials' });
  }
  const token = jwt.sign({ id: user._id }, JWT_SECRET, { expiresIn: '1d' });
  res.json({ token, message: 'Login successful' });
});

// Internship form
app.post('/api/internship-apply', (req, res) => {
  const { name, email, college } = req.body;
  if (!name || !email || !college) {
    return res.status(400).json({ message: 'All fields required' });
  }
  res.status(200).json({ message: 'Internship application submitted' });
});

// Offer letter
app.post('/api/offer-letter', (req, res) => {
  const { name, internshipRole } = req.body;
  if (!name || !internshipRole) {
    return res.status(400).json({ message: 'Missing required fields' });
  }
  res.status(200).json({ message: `Offer letter generated for ${name}` });
});

app.listen(5000, () => console.log('Server running on http://localhost:5000'));
